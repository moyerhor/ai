import tkinter as tk
from tkinter import ttk
import tkinter.scrolledtext as scrolledtext
from interactive_chat import InteractiveLearningBot
import torch
import requests
import json
import os
from urllib.parse import quote

class DarkTheme:
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞
    BG_COLOR = "#1e1e1e"  # –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Ñ–æ–Ω
    FG_COLOR = "#e0e0e0"  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –±–µ–ª—ã–π –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    BUTTON_BG = "#2d2d2d"  # –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –∫–Ω–æ–ø–æ–∫
    BUTTON_BG_HOVER = "#3d3d3d"  # –¶–≤–µ—Ç –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
    BUTTON_FG = "#e0e0e0"  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    ENTRY_BG = "#2d2d2d"  # –§–æ–Ω –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    ENTRY_FG = "#e0e0e0"  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª—è—Ö –≤–≤–æ–¥–∞
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —á–∞—Ç–∞
    CHAT_BG = "#1e1e1e"  # –§–æ–Ω –æ–±–ª–∞—Å—Ç–∏ —á–∞—Ç–∞
    CHAT_FG = "#e0e0e0"  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞
    CHAT_USER_MSG = "#4a9eff"  # –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    CHAT_BOT_MSG = "#45c937"  # –¶–≤–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞

class WebSearch:
    def __init__(self):
        try:
            from googlesearch import search
            self.search_func = search
        except ImportError:
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install googlesearch-python")
            self.search_func = None
        
    def search(self, query, num_results=4):
        """–ü–æ–∏—Å–∫ –≤ Google"""
        if not self.search_func:
            return ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É googlesearch-python –∫–æ–º–∞–Ω–¥–æ–π:\npip install googlesearch-python"]
            
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = []
            for url in self.search_func(query, lang='ru', num_results=num_results):
                results.append(f"üîó {url}")
            
            if results:
                return results
            return ["–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]
            
        except Exception as e:
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"]

class ChatGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("–ß–∞—Ç —Å –ò–ò")
        self.root.geometry("800x600")
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        self.apply_dark_theme()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –ø–æ–∏—Å–∫–æ–≤–∏–∫
        self.bot = InteractiveLearningBot()
        self.web_search = WebSearch()
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.create_widgets()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
        self.choosing_response = False
        self.response_buttons = []
        self.current_responses = []
        
    def apply_dark_theme(self):
        self.root.configure(bg=DarkTheme.BG_COLOR)
        
        style = ttk.Style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è —Ñ—Ä–µ–π–º–∞
        style.configure(
            "Dark.TFrame",
            background=DarkTheme.BG_COLOR,
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –∫–Ω–æ–ø–æ–∫
        style.configure(
            "Dark.TButton",
            background=DarkTheme.BUTTON_BG,
            foreground=DarkTheme.BUTTON_FG,
            borderwidth=0,
            focuscolor=DarkTheme.BUTTON_BG_HOVER,
            lightcolor=DarkTheme.BUTTON_BG,
            darkcolor=DarkTheme.BUTTON_BG,
            relief="flat",
            padding=10
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        style.configure(
            "Dark.TEntry",
            fieldbackground=DarkTheme.ENTRY_BG,
            foreground=DarkTheme.ENTRY_FG,
            borderwidth=0,
            relief="flat",
            padding=5
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        style.map(
            "Dark.TButton",
            background=[("active", DarkTheme.BUTTON_BG_HOVER)],
            foreground=[("active", DarkTheme.BUTTON_FG)]
        )
        
    def create_widgets(self):
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root, padding="20", style="Dark.TFrame")
        main_container.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —á–∞—Ç–∞ –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        chat_frame = ttk.Frame(main_container, style="Dark.TFrame")
        chat_frame.grid(row=0, column=0, columnspan=2, pady=(0, 20), sticky="nsew")
        chat_frame.columnconfigure(0, weight=1)
        chat_frame.rowconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        self.chat_area = tk.Text(
            chat_frame, 
            wrap=tk.WORD, 
            width=70, 
            height=20,
            bg=DarkTheme.CHAT_BG,
            fg=DarkTheme.CHAT_FG,
            insertbackground=DarkTheme.FG_COLOR,
            font=("Segoe UI", 10),
            relief="flat",
            padx=10,
            pady=10,
            selectbackground=DarkTheme.BUTTON_BG_HOVER,
            selectforeground=DarkTheme.FG_COLOR,
        )
        self.chat_area.grid(row=0, column=0, sticky="nsew")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —á–∞—Ç–∞
        chat_scrollbar = tk.Scrollbar(
            chat_frame, 
            orient="vertical", 
            command=self.chat_area.yview,
            bg=DarkTheme.BG_COLOR,
            troughcolor=DarkTheme.ENTRY_BG,
            activebackground=DarkTheme.BUTTON_BG_HOVER,
        )
        chat_scrollbar.grid(row=0, column=1, sticky="ns")
        self.chat_area.configure(yscrollcommand=chat_scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_area.tag_configure("user_msg", foreground=DarkTheme.CHAT_USER_MSG)
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ–≥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        self.chat_area.tag_configure("bot_msg", foreground=DarkTheme.CHAT_BOT_MSG)
        self.chat_area.config(state='disabled')
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
        self.input_field = tk.Entry(
            main_container, 
            width=60,
            bg=DarkTheme.ENTRY_BG,
            fg=DarkTheme.ENTRY_FG,
            insertbackground=DarkTheme.FG_COLOR,
            font=("Segoe UI", 10),
            relief="flat",
            bd=10,
            selectbackground=DarkTheme.BUTTON_BG_HOVER,
            selectforeground=DarkTheme.FG_COLOR,
        )
        self.input_field.grid(row=1, column=0, pady=(0, 20), sticky="ew")
        self.input_field.bind("<Return>", self.send_message)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_button = ttk.Button(
            main_container, 
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", 
            command=self.send_message,
            style="Dark.TButton"
        )
        send_button.grid(row=1, column=1, pady=(0, 20), padx=(10, 0))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        self.responses_frame = ttk.Frame(main_container, style="Dark.TFrame")
        self.responses_frame.grid(row=2, column=0, columnspan=2, sticky="ew")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–∂–µ–Ω–∏–µ
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_container.columnconfigure(0, weight=3)
        main_container.columnconfigure(1, weight=1)
        
    def append_to_chat(self, message, is_user=True):
        self.chat_area.config(state='normal')
        prefix = "–í—ã: " if is_user else "–ë–æ—Ç: "
        tag = "user_msg" if is_user else "bot_msg"
        
        self.chat_area.insert(tk.END, prefix, tag)
        self.chat_area.insert(tk.END, message + "\n\n")  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
        self.chat_area.see(tk.END)
        self.chat_area.config(state='disabled')
        
    def generate_response_options(self, user_input):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 4 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
        responses = []
        temperatures = [0.5, 0.7, 1.0, 1.2]
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        base_response = self.bot.generate_response(user_input)
        responses.append(base_response)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        while len(responses) < 4:
            # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            temp = temperatures[len(responses) - 1]
            response = self.bot.try_generate_better_response(user_input, base_response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if response not in responses:
                responses.append(response)
        
        return responses
        
    def show_custom_response_dialog(self):
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        dialog = tk.Toplevel(self.root)
        dialog.title("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
        dialog.geometry("400x200")
        dialog.configure(bg=DarkTheme.BG_COLOR)
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        text_frame = ttk.Frame(dialog, style="Dark.TFrame")
        text_frame.pack(pady=10, padx=20, fill=tk.BOTH, expand=True)
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞
        text_input = tk.Text(
            text_frame,
            wrap=tk.WORD,
            width=40,
            height=5,
            bg=DarkTheme.ENTRY_BG,
            fg=DarkTheme.ENTRY_FG,
            insertbackground=DarkTheme.FG_COLOR,
            font=("Segoe UI", 10),
            relief="flat",
            padx=10,
            pady=10,
            selectbackground=DarkTheme.BUTTON_BG_HOVER,
            selectforeground=DarkTheme.FG_COLOR,
        )
        text_input.grid(row=0, column=0, sticky="nsew")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        text_scrollbar = tk.Scrollbar(
            text_frame, 
            orient="vertical", 
            command=text_input.yview,
            bg=DarkTheme.BG_COLOR,
            troughcolor=DarkTheme.ENTRY_BG,
            activebackground=DarkTheme.BUTTON_BG_HOVER,
        )
        text_scrollbar.grid(row=0, column=1, sticky="ns")
        text_input.configure(yscrollcommand=text_scrollbar.set)
        
        def submit_response():
            response = text_input.get("1.0", tk.END).strip()
            if response:
                self.select_response(response)
                dialog.destroy()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        submit_button = ttk.Button(
            dialog,
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            command=submit_response,
            style="Dark.TButton"
        )
        submit_button.pack(pady=(0, 20))
        
        # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        text_input.focus_set()
        
    def show_response_options(self, responses):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
        for frame, label in self.response_buttons:
            frame.destroy()
        self.response_buttons.clear()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        for i, response in enumerate(responses):
            # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–º–Ω—ã–º —Ñ–æ–Ω–æ–º
            btn_frame = tk.Frame(
                self.responses_frame,
                bg=DarkTheme.BUTTON_BG,
                padx=10,
                pady=10
            )
            btn_frame.grid(row=i//2, column=i%2, padx=5, pady=5, sticky="ew")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–Ω—É—Ç—Ä–∏ —Ñ—Ä–µ–π–º–∞
            label = tk.Label(
                btn_frame,
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}:\n{response}",
                bg=DarkTheme.BUTTON_BG,
                fg=DarkTheme.BUTTON_FG,
                font=("Segoe UI", 10),
                wraplength=300,
                justify=tk.LEFT,
                padx=5,
                pady=5
            )
            label.pack(fill=tk.BOTH, expand=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self.add_button_handlers(btn_frame, label, response)
            
            self.response_buttons.append((btn_frame, label))
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        search_frame = tk.Frame(
            self.responses_frame,
            bg=DarkTheme.BUTTON_BG,
            padx=10,
            pady=10
        )
        search_frame.grid(row=2, column=0, padx=5, pady=5, sticky="ew")
        
        search_label = tk.Label(
            search_frame,
            text="üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            bg=DarkTheme.BUTTON_BG,
            fg=DarkTheme.BUTTON_FG,
            font=("Segoe UI", 10),
            padx=5,
            pady=5
        )
        search_label.pack(fill=tk.BOTH, expand=True)
        
        def on_search_enter(e):
            search_frame.configure(bg=DarkTheme.BUTTON_BG_HOVER)
            search_label.configure(bg=DarkTheme.BUTTON_BG_HOVER)
            
        def on_search_leave(e):
            search_frame.configure(bg=DarkTheme.BUTTON_BG)
            search_label.configure(bg=DarkTheme.BUTTON_BG)
            
        search_frame.bind("<Enter>", on_search_enter)
        search_frame.bind("<Leave>", on_search_leave)
        search_frame.bind("<Button-1>", lambda e: self.search_web())
        search_label.bind("<Enter>", on_search_enter)
        search_label.bind("<Leave>", on_search_leave)
        search_label.bind("<Button-1>", lambda e: self.search_web())
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        custom_frame = tk.Frame(
            self.responses_frame,
            bg=DarkTheme.BUTTON_BG,
            padx=10,
            pady=10
        )
        custom_frame.grid(row=2, column=1, padx=5, pady=5, sticky="ew")
        
        custom_label = tk.Label(
            custom_frame,
            text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
            bg=DarkTheme.BUTTON_BG,
            fg=DarkTheme.BUTTON_FG,
            font=("Segoe UI", 10),
            padx=5,
            pady=5
        )
        custom_label.pack(fill=tk.BOTH, expand=True)
        
        def on_custom_enter(e):
            custom_frame.configure(bg=DarkTheme.BUTTON_BG_HOVER)
            custom_label.configure(bg=DarkTheme.BUTTON_BG_HOVER)
            
        def on_custom_leave(e):
            custom_frame.configure(bg=DarkTheme.BUTTON_BG)
            custom_label.configure(bg=DarkTheme.BUTTON_BG)
            
        custom_frame.bind("<Enter>", on_custom_enter)
        custom_frame.bind("<Leave>", on_custom_leave)
        custom_frame.bind("<Button-1>", lambda e: self.show_custom_response_dialog())
        custom_label.bind("<Enter>", on_custom_enter)
        custom_label.bind("<Leave>", on_custom_leave)
        custom_label.bind("<Button-1>", lambda e: self.show_custom_response_dialog())
        
        self.response_buttons.extend([(search_frame, search_label), (custom_frame, custom_label)])
        
    def search_web(self):
        """–ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        search_results = self.web_search.search(self.current_user_input)
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        for frame, label in self.response_buttons:
            frame.destroy()
        self.response_buttons.clear()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        self.show_response_options(search_results)
        
    def add_button_handlers(self, frame, label, response):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
        def on_enter(e):
            frame.configure(bg=DarkTheme.BUTTON_BG_HOVER)
            label.configure(bg=DarkTheme.BUTTON_BG_HOVER)
            
        def on_leave(e):
            frame.configure(bg=DarkTheme.BUTTON_BG)
            label.configure(bg=DarkTheme.BUTTON_BG)
            
        def on_click(r=response):
            self.select_response(r)
            
        frame.bind("<Enter>", on_enter)
        frame.bind("<Leave>", on_leave)
        frame.bind("<Button-1>", lambda e, r=response: on_click(r))
        label.bind("<Enter>", on_enter)
        label.bind("<Leave>", on_leave)
        label.bind("<Button-1>", lambda e, r=response: on_click(r))
        
    def select_response(self, selected_response):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        self.append_to_chat(selected_response, is_user=False)
        
        # –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for frame, label in self.response_buttons:
            frame.destroy()
        self.response_buttons.clear()
        
        # –û–±—É—á–∞–µ–º –±–æ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        self.bot.learn_from_interaction(self.current_user_input, selected_response)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        self.choosing_response = False
        self.input_field.config(state='normal')
        
    def send_message(self, event=None):
        if self.choosing_response:
            return
            
        message = self.input_field.get().strip()
        if not message:
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.current_user_input = message
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_field.delete(0, tk.END)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        self.append_to_chat(message)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        self.current_responses = self.generate_response_options(message)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        self.choosing_response = True
        self.input_field.config(state='disabled')
        self.show_response_options(self.current_responses)

def main():
    root = tk.Tk()
    app = ChatGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main() 