import customtkinter as ctk
import torch
import requests
import json
import os
from urllib.parse import quote
from datetime import datetime
import torch.nn as nn
import torch.optim as optim
from titan_mac import TitanMACBot

class WebSearch:
    def __init__(self):
        try:
            from googlesearch import search
            self.search_func = search
        except ImportError:
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É: pip install googlesearch-python")
            self.search_func = None
            
    def search(self, query, num_results=4):
        """–ü–æ–∏—Å–∫ –≤ Google"""
        if not self.search_func:
            return ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±–∏–±–ª–∏–æ—Ç–µ–∫—É googlesearch-python –∫–æ–º–∞–Ω–¥–æ–π:\npip install googlesearch-python"]
            
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            results = []
            for url in self.search_func(query, lang='ru', num_results=num_results):
                results.append(f"üîó {url}")
            
            if results:
                return results
            return ["–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"]
            
        except Exception as e:
            return [f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}"]

class ChatGUI:
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("AI Chat")
        self.root.geometry("800x600")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.vocab_size = 1024
        self.d_model = 256
        self.nhead = 8
        self.num_layers = 4
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        self.chatbot = TitanMACBot(vocab_size=self.vocab_size, d_model=self.d_model, 
                                 nhead=self.nhead, num_layers=self.num_layers)
        self.optimizer = optim.Adam(self.chatbot.model.parameters(), lr=1e-3)
        self.loss_fn = nn.CrossEntropyLoss(ignore_index=0)
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.conversation_history = []
        self.memory_file = 'chat_memory.json'
        self.model_file = 'model.pth'
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ –º–æ–¥–µ–ª—å
        self.load_memory()
        self.load_model()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–∞
        self.choosing_response = False
        self.current_user_input = ""
        self.current_responses = []
        self.response_buttons = []
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–∏—Å–∫–æ–≤–∏–∫
        self.web_search = WebSearch()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_ui()
        
    def setup_ui(self):
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_frame = ctk.CTkFrame(self.root)
        self.main_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_frame = ctk.CTkScrollableFrame(self.main_frame)
        self.chat_frame.pack(fill="both", expand=True, padx=10, pady=(0, 10))
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –≤–≤–æ–¥–∞
        input_frame = ctk.CTkFrame(self.main_frame)
        input_frame.pack(fill="x", padx=10, pady=(0, 10))
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_field = ctk.CTkEntry(
            input_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
            height=40,
            font=("Segoe UI", 12)
        )
        self.input_field.pack(side="left", fill="x", expand=True, padx=(0, 10))
        self.input_field.bind("<Return>", self.send_message)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_button = ctk.CTkButton(
            input_frame,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            width=100,
            height=40,
            command=self.send_message
        )
        send_button.pack(side="right")
        
        # –§—Ä–µ–π–º –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
        self.responses_frame = ctk.CTkFrame(self.main_frame)
        self.responses_frame.pack(fill="x", padx=10)
        
    def append_to_chat(self, message, is_user=True):
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        msg_frame = ctk.CTkFrame(self.chat_frame)
        msg_frame.pack(fill="x", padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        prefix = "–í—ã: " if is_user else "–ë–æ—Ç: "
        msg_label = ctk.CTkLabel(
            msg_frame,
            text=f"{prefix}{message}",
            font=("Segoe UI", 12),
            wraplength=600,
            justify="left"
        )
        msg_label.pack(anchor="w", padx=10, pady=5)
        
    def show_response_options(self, responses):
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
        for button in self.response_buttons:
            button.destroy()
        self.response_buttons.clear()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        for i, response in enumerate(responses):
            response_button = ctk.CTkButton(
                self.responses_frame,
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {i+1}:\n{response}",
                command=lambda r=response: self.select_response(r),
                height=60,
                font=("Segoe UI", 12),
                wraplength=500
            )
            response_button.pack(fill="x", padx=5, pady=5)
            self.response_buttons.append(response_button)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        search_button = ctk.CTkButton(
            self.responses_frame,
            text="üîç –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",
            command=self.search_web,
            height=40,
            font=("Segoe UI", 12)
        )
        search_button.pack(fill="x", padx=5, pady=5)
        self.response_buttons.append(search_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–≤–æ–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        custom_button = ctk.CTkButton(
            self.responses_frame,
            text="‚úèÔ∏è –°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞",
            command=self.show_custom_response_dialog,
            height=40,
            font=("Segoe UI", 12)
        )
        custom_button.pack(fill="x", padx=5, pady=5)
        self.response_buttons.append(custom_button)
        
    def show_custom_response_dialog(self):
        dialog = ctk.CTkToplevel(self.root)
        dialog.title("–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞")
        dialog.geometry("400x300")
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        text_input = ctk.CTkTextbox(
            dialog,
            height=200,
            font=("Segoe UI", 12)
        )
        text_input.pack(fill="both", expand=True, padx=20, pady=(20, 10))
        
        def submit_response():
            response = text_input.get("1.0", "end-1c").strip()
            if response:
                self.select_response(response)
                dialog.destroy()
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        submit_button = ctk.CTkButton(
            dialog,
            text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            command=submit_response,
            height=40,
            font=("Segoe UI", 12)
        )
        submit_button.pack(pady=(0, 20))
        
        text_input.focus_set()
        
    def select_response(self, selected_response):
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        self.append_to_chat(selected_response, is_user=False)
        
        # –û—á–∏—â–∞–µ–º –∫–Ω–æ–ø–∫–∏
        for button in self.response_buttons:
            button.destroy()
        self.response_buttons.clear()
        
        # –û–±—É—á–∞–µ–º –±–æ—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        self.learn_from_interaction(self.current_user_input, selected_response)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        self.choosing_response = False
        self.input_field.configure(state="normal")
        
    def send_message(self, event=None):
        if self.choosing_response:
            return
            
        message = self.input_field.get().strip()
        if not message:
            return
            
        self.input_field.delete(0, "end")
        self.append_to_chat(message, is_user=True)
        
        self.current_user_input = message
        self.current_responses = self.generate_response_options(message)
        
        self.show_response_options(self.current_responses)
        
        self.choosing_response = True
        self.input_field.configure(state="disabled")
        
    def search_web(self):
        search_results = self.web_search.search(self.current_user_input)
        self.show_response_options(search_results)
        
    def save_memory(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è"""
        with open(self.memory_file, 'w', encoding='utf-8') as f:
            json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
            
    def load_memory(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è"""
        if os.path.exists(self.memory_file):
            try:
                with open(self.memory_file, 'r', encoding='utf-8') as f:
                    self.conversation_history = json.load(f)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.conversation_history)} –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ø–∞–º—è—Ç–∏")
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∞–º—è—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞")
                self.conversation_history = []
                
    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å"""
        self.chatbot.save(self.model_file)
        
    def load_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å"""
        if os.path.exists(self.model_file):
            try:
                self.chatbot.load(self.model_file)
                print("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
                
    def try_generate_better_response(self, user_input, wrong_response):
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç"""
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ö–æ–∂–∏–µ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        similar_dialogues = []
        for conv in self.conversation_history:
            if any(word in conv['user_input'].lower() for word in user_input.lower().split()):
                similar_dialogues.append(conv)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        attempts = []
        temperatures = [0.5, 0.7, 1.0, 1.2]
        max_lengths = [50, 100, 150]
        
        for temp in temperatures:
            for length in max_lengths:
                response = self.chatbot.generate_response(user_input, temperature=temp, max_length=length)
                if response and response != wrong_response and len(response.strip()) >= 3:
                    attempts.append(response)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        attempts = list(set(filter(None, attempts)))
        attempts = [r for r in attempts if r != wrong_response and len(r.strip()) >= 3]
        
        if attempts:
            return attempts[torch.randint(0, len(attempts), (1,)).item()]
            
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
        return self.chatbot.generate_response(user_input, temperature=1.2, max_length=150)
        
    def learn_from_interaction(self, user_input, wrong_response):
        """–û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        better_response = self.try_generate_better_response(user_input, wrong_response)
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –∏ –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        input_tokens = self.chatbot.tokenizer.encode(user_input)
        target_tokens = self.chatbot.tokenizer.encode(better_response)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
        input_tensor = torch.tensor([input_tokens]).long()
        target_tensor = torch.tensor([target_tokens]).long()
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º learning rate –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        for param_group in self.optimizer.param_groups:
            param_group['lr'] *= 10
            
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        self.optimizer.zero_grad()
        output = self.chatbot.model(input_tensor)
        
        # –û–±—Ä–µ–∑–∞–µ–º –≤—ã—Ö–æ–¥ –¥–æ –¥–ª–∏–Ω—ã —Ü–µ–ª–∏
        min_len = min(output.size(1), target_tensor.size(1))
        output = output[:, :min_len, :]
        target_tensor = target_tensor[:, :min_len]
        
        # –°—á–∏—Ç–∞–µ–º loss
        loss = self.loss_fn(output.view(-1, self.chatbot.model.vocab_size), target_tensor.view(-1))
        loss.backward()
        self.optimizer.step()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º learning rate –æ–±—Ä–∞—Ç–Ω–æ
        for param_group in self.optimizer.param_groups:
            param_group['lr'] *= 0.1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        self.conversation_history.append({
            'user_input': user_input,
            'bot_response': better_response,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'loss': float(loss.item()),
            'was_corrected': True
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –º–æ–¥–µ–ª—å
        self.save_memory()
        self.save_model()
        
        return better_response, float(loss.item())
        
    def generate_response_options(self, user_input):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        responses = []
        temperatures = [0.7, 1.0, 1.2]
        max_lengths = [50, 100, 150]
        
        for temp in temperatures:
            for length in max_lengths:
                response = self.chatbot.generate_response(user_input, temperature=temp, max_length=length)
                if response and len(response.strip()) >= 3:
                    responses.append(response)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        responses = list(set(filter(None, responses)))
        responses = [r for r in responses if len(r.strip()) >= 3]
        
        if not responses:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã, –ø—Ä–æ–±—É–µ–º —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–æ–π
            response = self.chatbot.generate_response(user_input, temperature=1.5, max_length=200)
            if response and len(response.strip()) >= 3:
                responses = [response]
        
        return responses[:5]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤

def main():
    app = ChatGUI()
    app.root.mainloop()

if __name__ == "__main__":
    main() 